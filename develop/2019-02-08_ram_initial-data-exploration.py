#!/usr/bin/env python
# coding: utf-8

# This is my walkthrough of [this kernel](https://www.kaggle.com/artgor/is-this-malware-eda-fe-and-lgb-updated) in an effort to learn and improve my Kaggle skills.

# ## Microsoft Malware Prediction
# 
# With help from the above mentioned kernel, I'll try my own EDA

# In[2]:


#libraries
import numpy as np 
import pandas as pd 
import os

import seaborn as sns 

import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
#plt.style.use('ggplot')

import altair as alt

import lightgbm as lgb

# Couldn't get this to install on Windows...  Works on Ubuntu
import xgboost as xgb
# In[3]:


import time
import datetime

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold, KFold, TimeSeriesSplit
from sklearn.metrics import mean_squared_error, roc_auc_score
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV
import gc
from catboost import CatBoostClassifier
from tqdm import tqdm_notebook

import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls
# In[4]:


import warnings
warnings.filterwarnings("ignore")

import logging

logging.basicConfig(filename='log.txt',level=logging.DEBUG, format='%(asctime)s %(message)s')

pd.set_option('max_colwidth', 500)
pd.set_option('max_columns', 500)
pd.set_option('max_rows', 100)
import os
print(os.listdir("../data"))


# In[5]:


dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }


# In[6]:


get_ipython().run_cell_magic('time', '', "train = pd.read_csv('../data/train.csv', dtype=dtypes)")


# In[6]:


print("Training set takes {:5.2f} Mb".format(train.memory_usage(deep=True).sum() / 1024**2))


# In[7]:


train['PuaMode'].value_counts(normalize=True, dropna=False)


# In[8]:


train['HasDetections'].value_counts(normalize=True, dropna=False).values[0] * 100


# In[9]:


stats = []
for col in train.columns:
    stats.append((col,
                  train[col].nunique(),
                  train[col].isnull().sum() * 100 / train.shape[0],
                  train[col].value_counts(normalize=True, dropna=False).values[0] * 100,
                  train[col].dtype))
stats_df = pd.DataFrame(stats, columns=['Feature', 'Unique_values', 
                                        'Percentage of missing values', 
                                        'Percentage of values in the biggest category', 'type'])
stats_df.sort_values('Percentage of missing values', ascending=False)


# In[10]:


len(train)


# Pua Mode = Pua Enabled mode from the service<br>
# Pua = Potentially unwanted application
# 
# 99.97% missing... so, still 2309 samples with it available... 

# In[11]:


train['PuaMode'].unique()


# So, 99.97% are null/nan, but maybe we can assume that means not configured or disabled?
# 
# *this was deleted in the original... consider adding it back later.*

# As mentioned in the original version, many of the fields are improperly type-cast as numeric when they are actually categorical.  Says all are categorical except `Census_SystemVolumeTotalCapacity`, but there are others.  For example:
# * Census_InternalBatteryNumberOfCharges
# * Census_TotalPhysicalRAM
# * Census_PrimaryDiskTotalCapacity
# * Census_SystemVolumeTotalCapacity
# * Census_InternalPrimaryDiagonalDisplaySizeInInches 
# * Census_InternalPrimaryDisplayResolutionHorizontal
# * Census_InternalPrimaryDisplayResolutionVertical
# * ...

# In[12]:


# simply drop features with mostly NaN
# consider keeping some of these in future versions
good_cols = list(train.columns)
for col in train.columns:
    # originally wrote
    # rate = train[col].value_counts(normalize=True, dropna=False).values[0]
    # but this doesn't remove the columns with mostly NaN.... it removes the 
    # columns with >90% in its highest value.... in this case it's the same, but 
    # it should be:
    rate = train[col].isnull().sum() / train.shape[0]
    if rate > 0.9:
        print(col)
        good_cols.remove(col)


# In[13]:


train = train[good_cols]


# <br>Now we can read test data... **but mabye leave this until after exploration**... unless you have memory to spare<br>

# In[13]:


test_dtypes = {k:v for k,v in dtypes.items() if k in good_cols}
test = pd.read_csv('../data/test.csv', dtype=test_dtypes, usecols=good_cols[:-1])


# <br>At this point total memory usage is ~6800MB<br>

# In[14]:


test.loc[6529507, 'OsBuildLab']


# In[ ]:


test['OsBuildLab']


# In[16]:


# Why does he assign a value to this?  Maybe because of the '*'
test.loc[6529507, 'OsBuildLab'] = '17134.1.amd64fre.rs4_release.180410-1804'


# ### Data Exploration

# In[14]:


train.head()


# In[15]:


# The output variable
train['HasDetections'].value_counts()


# In[16]:


train['Census_IsTouchEnabled'].value_counts()


# In[18]:


train.groupby(['Census_IsTouchEnabled', 'HasDetections']).HasDetections.agg('count')


# In[28]:


train.groupby(['Census_IsTouchEnabled', 'HasDetections']).agg({'HasDetections' : 'count'})


# This is a test

# In[ ]:




